# Informe de Funcionalidades del Sistema: Chat SDK

## 1. Resumen General

Este sistema es una aplicación de chatbot avanzada y de código abierto construida sobre un stack tecnológico moderno. La aplicación, denominada "Chat SDK", proporciona una plataforma robusta para crear potentes aplicaciones de chat impulsadas por inteligencia artificial. Su principal característica es una interfaz de chat dinámica que no solo permite conversaciones de texto, sino que también interactúa con un agente de IA capaz de realizar acciones complejas, como la generación de contenido estructurado (denominado "Artefactos") y el uso de herramientas para acceder a información externa.

## 2. Funcionalidades Principales

### a. Interfaz de Chat Inteligente
El núcleo del sistema es una interfaz de chat moderna y responsiva. Los usuarios pueden mantener conversaciones fluidas con un asistente de IA. La interfaz soporta:
- **Historial de Conversaciones:** Los chats se guardan y se pueden revisitar más tarde.
- **Renderizado de Markdown:** Las respuestas del modelo pueden tener formato, incluyendo encabezados, listas, bloques de código, etc.
- **Componentes de UI Generativa:** La interfaz puede renderizar dinámicamente componentes interactivos basados en la respuesta del modelo de IA.

### b. Autenticación de Usuarios
El sistema cuenta con un módulo de autenticación completo (`Auth.js`) que permite:
- **Registro de nuevos usuarios.**
- **Inicio de sesión** para usuarios existentes.
- **Persistencia de la sesión de usuario** para asociar los historiales de chat y otros datos con usuarios específicos.

### c. Generación de Artefactos
Esta es una de las características más distintivas del sistema. Un "Artefacto" es un bloque de contenido estructurado y editable que la IA genera como respuesta a una solicitud del usuario. Los artefactos aparecen en un panel lateral junto al chat y permiten una interacción más rica que un simple mensaje de texto. Basado en las dependencias del proyecto, los tipos de artefactos soportados incluyen:
- **Documentos de Texto:** Para solicitudes como "escríbeme un ensayo sobre...". El sistema crea un editor de texto enriquecido (usando ProseMirror).
- **Código:** La IA puede generar fragmentos de código que se muestran en un editor especializado (usando CodeMirror) con resaltado de sintaxis.
- **Hojas de Cálculo (Sheets):** Capacidad para generar y mostrar datos en formato de tabla o cuadrícula (usando `react-data-grid`).

### d. Uso de Herramientas por parte de la IA
El modelo de lenguaje subyacente puede utilizar un conjunto de herramientas predefinidas para realizar acciones y responder a las preguntas de los usuarios de manera más efectiva. Las herramientas identificadas son:
- **`create-document`:** Crea un nuevo artefacto de tipo documento con el contenido solicitado.
- **`update-document`:** Modifica el contenido de un artefacto de documento ya existente.
- **`get-weather`:** Obtiene datos meteorológicos en tiempo real de una fuente externa para responder a preguntas como "¿qué tiempo hace en...?"
- **`request-suggestions`:** La IA puede solicitar y mostrar sugerencias de acciones o preguntas de seguimiento para guiar al usuario.

### e. Persistencia de Datos
El sistema está configurado para almacenar datos de forma persistente:
- **Base de Datos:** Utiliza Neon Serverless Postgres con el ORM Drizzle para guardar el historial de chats y los datos de los usuarios.
- **Almacenamiento de Archivos:** Utiliza Vercel Blob para el almacenamiento eficiente de archivos que los usuarios puedan subir.

### f. Selección de Modelos de IA
La arquitectura (a través del AI SDK de Vercel) es agnóstica al modelo, lo que permite a los desarrolladores configurar y cambiar fácilmente entre diferentes proveedores de modelos de lenguaje (LLM), como xAI (el predeterminado), OpenAI, Anthropic, entre otros.

## 3. Pila Tecnológica

- **Framework Frontend/Backend:** Next.js (con App Router, React Server Components y Server Actions).
- **Inteligencia Artificial:** Vercel AI SDK.
- **Autenticación:** Auth.js (NextAuth v5).
- **Base de Datos:** Neon Serverless Postgres.
- **ORM:** Drizzle ORM.
- **Almacenamiento de Archivos:** Vercel Blob.
- **UI y Estilos:** shadcn/ui, Tailwind CSS, Radix UI.
- **Editores de Artefactos:** CodeMirror (código), ProseMirror (texto), React Data Grid (hojas de cálculo).
- **Testing End-to-End:** Playwright.
- **Lenguaje:** TypeScript.

## 4. Resumen de Cambios y Guía de Despliegue Final

Esta sección resume las modificaciones realizadas y proporciona los pasos definitivos para un despliegue exitoso en Vercel.

### a. Cambios Implementados

1.  **Integración con OpenAI:** Se modificó la aplicación para utilizar los modelos de OpenAI (`gpt-4-turbo`, `gpt-4o`, `dall-e-3`) en lugar del proveedor por defecto.
2.  **Funcionalidad de Especialidad Médica:** Se añadió un menú desplegable en la interfaz que permite al usuario seleccionar una especialidad (Cardiología, Neurología, etc.), haciendo que las respuestas de la IA sean más precisas y contextualizadas.

### b. Archivos Modificados para Subir a GitHub

Para que los cambios surtan efecto, es necesario subir los siguientes 9 archivos a su repositorio:

1.  `package.json`
2.  `.env.example`
3.  `pnpm-lock.yaml` (Importante: La versión generada después de ejecutar `pnpm install` localmente)
4.  `lib/ai/providers.ts`
5.  `lib/ai/prompts.ts`
6.  `components/chat.tsx`
7.  `app/(chat)/api/chat/route.ts`
8.  `app/(chat)/api/chat/schema.ts`
9.  `informe.txt` (este informe)

### c. Pasos para el Despliegue en Vercel

1.  **Actualizar Lockfile:** Ejecute el siguiente comando en su terminal local para asegurarse de que `pnpm-lock.yaml` está sincronizado:
    ```bash
    pnpm install
    ```
2.  **Subir Cambios a GitHub:** Suba todos los archivos listados en la sección anterior a su repositorio de GitHub.
3.  **Configurar Variables de Entorno en Vercel:** En el panel de control de su proyecto de Vercel, configure las siguientes variables:
    -   `OPENAI_API_KEY`: Su clave de API de OpenAI.
    -   `AUTH_SECRET`: Un secreto de autenticación (puede generar uno en `https://generate-secret.vercel.app/32`).
    -   `BLOB_READ_WRITE_TOKEN`: El token para Vercel Blob Storage.
    -   `POSTGRES_URL`: La URL de conexión a su base de datos de Vercel Postgres.

Una vez completados estos pasos, el despliegue en Vercel se realizará automáticamente y con éxito.